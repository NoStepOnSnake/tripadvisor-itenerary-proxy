server: {
  listen 8080,
  root /srv/www/static;
  location / {
  # location is a way to declare a route as in express, so line 4 is "someone made a request to ngnix for /, or root"
    try_files $uri $uri/ @web;
    # try to get static files from nginx first 
    # line 6 provides a sequence of places where I want to look for a given static file. 
    # $uri is going to be in the root of the directory on line 3 (/srv/www/static), $uri/ adds a slash
    # @web is a named location not mapped to a url so you can reference the location from other places in the config.
  }
  location @web {
    proxy_pass http://web:3000;
    # a proxy pass means, "take the incoming request and send it to this location".
    # So we are first checking in our nginx instance if we can find the file.
    # If we can't find it we will send it to our @web microservice because if we look at the index.html file
    # it's just a static file, not rendered at all.  Why would we want Node to serve that stuff up?
    # Node is not good at I/O operations, so when it comes to HTML and serving static files, it's much 
    # healthier if nginx takes care of this request.  It will save time/load on the microservice.
    # Any requests that do NOT map to a request will go on to hit the web server.
    # So you can mix static files that don't need any rendering from nginx, and stuff that actually
    # needs to go to the server from the server.
  }
  location /api/itinerary {
    proxy_pass http://itinerary:3000;
    # instead of saying 'localhost' or an ip address, set a domain name that maps to the
    # different module names. 
  }
  location /api/travelers {
    proxy_pass http://travelers:3000;
  }
    location /api/reviews {
    proxy_pass http://reviews:3000;
  }
    location /api/gallery {
    proxy_pass http://gallery:3000;
  }
}